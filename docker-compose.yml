services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: clruser
      POSTGRES_PASSWORD: clrpass
      POSTGRES_DB: clrdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clruser"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: clr-webui-backend
    ports:
      - "8080:8080"
    environment:
      # PostgreSQL connection
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/clrdb
      SPRING_DATASOURCE_USERNAME: clruser
      SPRING_DATASOURCE_PASSWORD: clrpass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      # Logging configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_CLR: DEBUG
      # Management endpoints for health checks
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      # Server startup settings
      SERVER_TOMCAT_MAX_THREADS: 4
      JAVA_TOOL_OPTIONS: "-Xmx512m -Dspring.profiles.active=docker"
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: clr-webui-frontend
    ports:
      - "3000:80"  # Map container port 80 to host port 3000
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 20s
      timeout: 5s
      retries: 3

networks:
  default:
    driver: bridge

volumes:
  postgres_data: