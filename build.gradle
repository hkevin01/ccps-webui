plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.6' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
}

group = 'com.clr'
version = '1.0.0'

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '17'
    targetCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
        // Ensure annotationProcessor for JPA and Lombok
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
        annotationProcessor 'org.projectlombok:lombok:1.18.32'
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-autoconfigure'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.postgresql:postgresql:42.7.3'
        implementation 'org.projectlombok:lombok:1.18.32'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.mockito:mockito-core:5.2.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'com.h2database:h2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    }
}

springBoot {
    mainClass = 'com.clr.ClrBackendApplication'
}

bootJar {
    archiveFileName = 'app.jar'
    destinationDirectory = file("$projectDir/build/libs")
    enabled = true
}

// For diagnostics, keep jar enabled and add a post-build listing
jar {
    enabled = true
}

tasks.named('jar') {
    doLast {
        println "DIAG: Listing $projectDir/build/libs after jar:"
        def libsDir = file("$projectDir/build/libs")
        if (libsDir.exists()) {
            libsDir.listFiles()?.each { println "  - ${it.name}" }
        }
    }
}

// Add this to print the main class and classpath for diagnostics
tasks.named('bootJar') {
    doFirst {
        println "DIAG: Spring Boot mainClass = ${springBoot.mainClass.getOrNull()}"
        println "DIAG: Source set main output = ${sourceSets.main.output.classesDirs.asPath}"
        println "DIAG: Source set main resources = ${sourceSets.main.resources.srcDirs}"
            sourceSets.main.output.classesDirs.each { dir ->
                if (dir.exists()) {
                    println "DIAG: Contents of $dir:"
                    dir.listFiles().each { f ->
                        println "  - ${f.name}"
                    }
                } else {
                    println "DIAG: Directory $dir does not exist."
                }
            }
        println "DIAG: All classes in main output:"
        fileTree(sourceSets.main.output.classesDirs).visit { FileVisitDetails fvd ->
            if (!fvd.isDirectory()) println "  - ${fvd.file}"
        }
    }
}

// --- Add this diagnostic block ---
tasks.named('bootJar') {
    doLast {
        println "DIAG: Listing $projectDir/build/libs after bootJar:"
        def libsDir = file("$projectDir/build/libs")
        if (libsDir.exists()) {
            libsDir.listFiles()?.each { println "  - ${it.name}" }
        }
    }
}
// --- end diagnostic block ---

build.dependsOn bootJar
tasks.register('debugJarOutput') {
    doLast {
        println "DEBUG: Listing $projectDir/build/libs after build:"
        def libsDir = file("$projectDir/build/libs")
        if (libsDir.exists()) {
            libsDir.listFiles()?.each { println it }
            libsDir.listFiles()?.each { f ->
                if (!f.canRead() || !f.canWrite()) {
                    println "Fixing permissions for ${f.name}"
                    f.setReadable(true, false)
                    f.setWritable(true, false)
                }
            }
        } else {
            println "Directory $projectDir/build/libs does not exist after build."
        }
    }
}
build.finalizedBy 'debugJarOutput'
