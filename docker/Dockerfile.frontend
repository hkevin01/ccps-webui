# Build stage
FROM node:18-alpine as build
WORKDIR /app

# Copy package files first for better layer caching
COPY frontend/package.json ./

# Install dependencies with specific versions that are compatible with Node 18
RUN npm install && \
    npm install --save react-router-dom@6.20.1 chart.js@4.4.1 react-chartjs-2@5.2.0 && \
    npm install --save ol@7.5.1 ol-layerswitcher@4.1.1 proj4@2.9.2

# Copy source code after dependencies are installed
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/tsconfig.json ./tsconfig.json

# Create styles directory for OpenLayers CSS if it doesn't exist
RUN mkdir -p src/styles && \
    if [ ! -f src/styles/map-styles.css ]; then \
    echo '@import "ol/ol.css"; \
    @import "ol-layerswitcher/dist/ol-layerswitcher.css"; \
    .map-container { width: 100%; height: 400px; border: 1px solid #ddd; border-radius: 4px; }' > src/styles/map-styles.css; \
    fi

# Build the app
RUN npm run build

# Production stage
FROM nginx:alpine
# Copy built app
COPY --from=build /app/build /usr/share/nginx/html

# Install curl for healthcheck
RUN apk add --no-cache curl

# Add nginx configuration with correct hostname for backend
RUN echo 'server { \
    listen 80; \
    listen [::]:80; \
    server_name localhost; \
    \
    # Enable CORS \
    add_header Access-Control-Allow-Origin "*"; \
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE"; \
    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"; \
    \
    location / { \
    root /usr/share/nginx/html; \
    index index.html; \
    try_files $uri $uri/ /index.html; \
    } \
    \
    # Proxy API requests to backend \
    location /api { \
    proxy_pass http://backend:8080/api; \
    proxy_http_version 1.1; \
    proxy_set_header Host $host; \
    proxy_set_header X-Real-IP $remote_addr; \
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
    proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    \
    # Health check endpoint \
    location /health { \
    access_log off; \
    return 200 "healthy\n"; \
    } \
    }' > /etc/nginx/conf.d/default.conf

# Create a basic health check script
RUN echo '#!/bin/sh\n\
    curl -f http://localhost/health || exit 1' > /healthcheck.sh && \
    chmod +x /healthcheck.sh

EXPOSE 80
HEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD ["/healthcheck.sh"]
CMD ["nginx", "-g", "daemon off;"]
