FROM openjdk:17-jdk-slim

# Install curl for healthcheck
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory inside the container
WORKDIR /app

# Copy the Gradle build output (JAR file) into the container
COPY backend/build/libs/app.jar app.jar

# Create a health check script with improved reliability
RUN echo '#!/bin/sh\n\
    set -e\n\
    HEALTH_URL="http://localhost:8080/actuator/health"\n\
    MAX_RETRIES=3\n\
    RETRY_COUNT=0\n\
    \n\
    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do\n\
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")\n\
    if [ "$RESPONSE" = "200" ]; then\n\
    exit 0\n\
    fi\n\
    echo "Health check failed with status $RESPONSE, retrying..."\n\
    RETRY_COUNT=$((RETRY_COUNT+1))\n\
    sleep 2\n\
    done\n\
    \n\
    echo "Health check failed after $MAX_RETRIES attempts"\n\
    exit 1' > /healthcheck.sh && \
    chmod +x /healthcheck.sh

# Add JAVA_TOOL_OPTIONS for better performance in containers
ENV JAVA_TOOL_OPTIONS="-Xmx512m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"

# Add a simple wait script to ensure database is ready
RUN echo '#!/bin/sh\n\
    java -jar app.jar' > /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Environment variables with defaults
ENV SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/clrdb
ENV SPRING_DATASOURCE_USERNAME=clruser
ENV SPRING_DATASOURCE_PASSWORD=clrpass
ENV SPRING_PROFILES_ACTIVE=docker

# Expose port 8080 to the outside world
EXPOSE 8080

# Add a HEALTHCHECK instruction
HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD /healthcheck.sh

# Set the command to run the application with a wait for the database
ENTRYPOINT ["/entrypoint.sh"]

# The backend Dockerfile expects a JAR at backend/build/libs/app.jar.
# Ensure your Gradle build produces this file.
